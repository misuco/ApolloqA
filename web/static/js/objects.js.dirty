//// OBJECTS

var mRed = new BABYLON.StandardMaterial("m4", scene);
mRed.diffuseColor = new BABYLON.Color3(1, 0, 0);
mRed.alpha = 0.5;
mRed.freeze();

var mGreen = new BABYLON.StandardMaterial("m5", scene);
mGreen.diffuseColor = new BABYLON.Color3(0, 1, 0);
mGreen.freeze();

var mYellow = new BABYLON.StandardMaterial("m3", scene);
mYellow.diffuseColor = new BABYLON.Color3(1, 1, 0);
mYellow.alpha = 0.5;
mYellow.freeze();

var nOrbiter = 4;
var orbiter = [];
var orbitertrack = [];
var orbitertrackVolume = [];
var orbitertrackMute = [];
var orbitertrackObserver = [];

for(let i=0;i<nOrbiter;i++) {
    orbiter[i]=[];
    orbitertrackVolume[i]=0.9;
    orbitertrackMute[i]=false;
    for(let j=0;j<16;j++) {
      orbiter[i][j] = BABYLON.MeshBuilder.CreateSphere("orbiter"+i, { diameter:1 }, scene);
      orbiter[i][j].isVisible = false;
      orbiter[i][j].material = mGreen;
  }
}

function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}

let sessionId=0;

var playTrack = function(trackUrl,trackId) {
	console.log("play track: "+trackUrl);

    if(syncTrackRunning===false) {
        syncTrackTimer();
    }
    
	if(orbitertrack[trackId]!==undefined) {
		orbitertrack[trackId].stop();
		orbitertrack[trackId].dispose();
        scene.onBeforeRenderObservable.remove(orbitertrackObserver[trackId]);
	}
    
    BABYLON.CreateSoundAsync(trackUrl,
    trackUrl,
    { spatialEnabled: true, volume: 0.9 }
    ).then( (track)=> {
        console.log("music 1 ready... play " + trackUrl);
        track.setVolume(orbitertrackVolume[trackId]);
        readyTacks.push(track);
        track.spatial.attach(orbiter[trackId][0]);
    
    	orbitertrack[trackId]=track;
        //orbiter[trackId].material = mGreen;

        orbitertrackObserver[trackId] = scene.onBeforeRenderObservable.add(() => {
            const frequencies = track.analyzer.getByteFrequencyData();
            //let maxLevel=0;
            for (let i = 0; i < 16; i++) {
                let scaling = frequencies[i]/ 255;
                orbiter[trackId][i].scaling.x=scaling;
                orbiter[trackId][i].scaling.y=scaling;
                orbiter[trackId][i].scaling.z=scaling;
                //maxLevel=Math.max(maxLevel,frequencies[i] / 255);
            }
        });

    	console.log("playing sound:"+trackUrl);
    })
    .catch((err) => {
        console.error("cannot play sound:"+trackUrl+" "+err);
    });
}

var triggerNewSound = function(trackId) {

    //orbiter[trackId].material = mRed;
	
	var oReq = new XMLHttpRequest();
	oReq.addEventListener("load", function() {
		if(this.response.includes("Error")) {
			console.log("server error!!!")
			//nextSound()
			triggerNewSound(trackId)
		} else {
            playTrack(this.response + ".mp3",trackId)
            for(let i=0;i<16;i++) {
                orbiter[trackId][i].isVisible=true
            }
		}
	});

	var getUrl = window.location;
	var baseUrl = getUrl.protocol + "//" + getUrl.host + "/";

	console.log("trigger new sound trackId " + trackId);

	//var queryId=trackId+"_"+clipId+"_"+aqa.tempo+"_"+loopLength+"_"+repeat+"_"+pitch+"_"+basenote+"_"+scale+"_"+arrange+"_"+Date.now();
    var queryId=trackId+"_"+aqa.tempo+"_"+Date.now();
	oReq.open("GET", baseUrl + "newclip?id="+queryId+"&tempo="+aqa.tempo+"&sessionId="+sessionId);
	oReq.send();
	
}
